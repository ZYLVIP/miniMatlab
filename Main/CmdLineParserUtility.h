/*
	CmdLineParserUtility.h

	The QStudio Project (since 2017)
 
	Contributor(s): 
	SHI, Guoyong 		(shiguoyong@sjtu.edu.cn) 
	School of Microelectronics, Shanghai Jiao Tong University 
	(c) 2007 - 2007 
*/

#ifndef CMD_LINE_PARSER_UTILITY_H
#define CMD_LINE_PARSER_UTILITY_H

// The following headers are automatically generated by Bison
#include "./CmdLineParser.hpp"	


#define NSYM 	65535
#define EE		2.71828183		

/*
	Types of EXPR_ENTRY and VECTOR_t have been defined in "CmdLineParser.yy"
	and included in by "./CmdLineParser.hpp".
*/

namespace Cmd {
	class CmdLineParser;
}

#undef YY_DECL

/*
	The next prototype declaration defines the pointer variables 
	"yylval", "yylloc", and "parserUtil" to be used in the scanner.
*/
#define YY_DECL \
	Cmd::CmdLineParser::token_type yylex(Cmd::CmdLineParser::semantic_type *yylval \
					, Cmd::CmdLineParser::location_type *yylloc \
					, CmdLineParserUtility *parserUtil )

YY_DECL;

class NN_Plotter;
class ImageViewSetting;

class CmdLineParserUtility
{

public:
	CmdLineParserUtility();
	~CmdLineParserUtility();

	void clearAllVariables();
	void deleteVarEntry(EXPR_ENTRY *entry);
	EXPR_ENTRY* getVariable(const char *name);
	EXPR_ENTRY* lookupVariable(char *name);

	/* The following functions are defined in CommandLineParse.yy. */
	VECTOR_t evaluateFunction(char *fname, VECTOR_t vin);
	void dumpResultString(const char *str);
	double round(double x);

	inline string getResultString()  { return IntermediateResult; }
	inline void initResultString() { IntermediateResult = ""; }
	inline bool isEmptyResult()  { return IntermediateResult.empty(); }

	void new_plotting_window(int *num);
	void plotVector2D(VECTOR_t x, VECTOR_t y);

	void dumpAllVariables();
	string dumpVarEntry(EXPR_ENTRY *entry);
	void dumpVarEntryToResult(EXPR_ENTRY *entry);
	string dumpValueList(double *val, int vlen);
	void dumpValueListToResult(double *val, int vlen);

	void printAllVariables();
	void printVarEntry(EXPR_ENTRY *entry);
	void printParseError(const Cmd::location &loc, const string &msg);
	void printValueList(double *val, int vlen);

	void request_figure(int n);

public:
	char CommandLine[1024];
	
	//char *CmdLineParseResult;

public:
	EXPR_ENTRY	*VarSymbolTable;	/* a list of expr entries */
	EXPR_ENTRY 	*ansEntry;	/* Saving an expression without assignment */

	unsigned AnsStrLen;  // length of the answer string

private:
	int	 CmdWindowWidth;  /* width of command window (in chars) */
	int  ResultCount;

	string IntermediateResult;  // Saving the middle results of parsing

	NN_Plotter *Plotter2D;
    //ImageViewSetting *PlotterSettings2D;
	int  CurveCount;
	
};

#endif

